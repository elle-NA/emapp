<!DOCTYPE html>
<html lang="bg">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Миксер на емоции</title>
    
    <!-- PWA Settings -->
    <link rel="manifest" href="manifest.json">
    <meta name="theme-color" content="#a78bfa">
    <link rel="apple-touch-icon" href="icon-192.png">

    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            -webkit-tap-highlight-color: transparent;
        }
        .emotion-btn {
            transition: all 0.2s ease-in-out;
        }
        .emotion-btn:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 15px rgba(0,0,0,0.1);
        }
        .emotion-btn.selected {
            transform: scale(1.05);
            box-shadow: 0 0 0 4px white, 0 0 0 7px var(--tw-shadow-color);
            z-index: 10;
        }
        #result-card {
            background: linear-gradient(135deg, var(--color-1, #e0e0e0), var(--color-2, #f0f0f0));
            transition: background 0.5s ease;
        }
        .text-shadow {
            text-shadow: 0px 1px 3px rgba(0,0,0,0.3);
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200 flex items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-4xl mx-auto">
        <header class="text-center mb-8">
            <h1 class="text-4xl md:text-5xl font-bold text-gray-800 dark:text-white">Емоционален миксер</h1>
            <p class="text-lg text-gray-600 dark:text-gray-400 mt-2">Изберете две емоции, за да откриете тяхната комбинация.</p>
        </header>

        <main class="grid grid-cols-1 md:grid-cols-2 gap-8 items-start">
            <!-- Emotion Selectors -->
            <div class="space-y-6">
                <div>
                    <h2 class="text-2xl font-semibold mb-4 text-center">Първа емоция</h2>
                    <div id="emotion-selector-1" class="grid grid-cols-3 gap-3">
                        <!-- Buttons will be generated by JS -->
                    </div>
                </div>
                <div>
                    <h2 class="text-2xl font-semibold mb-4 text-center">Втора емоция</h2>
                    <div id="emotion-selector-2" class="grid grid-cols-3 gap-3">
                        <!-- Buttons will be generated by JS -->
                    </div>
                </div>
            </div>

            <!-- Result Card -->
            <div class="sticky top-8">
                <div id="result-card" class="rounded-2xl p-8 shadow-2xl min-h-[250px] flex flex-col justify-center items-center text-center">
                    <div id="initial-state" class="text-center">
                         <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mx-auto text-gray-500 dark:text-gray-400 mb-4 opacity-50"><path d="M12 2a10 10 0 1 0 10 10c0-2.2-1.8-4-4-4"/><path d="M12 18a10 10 0 0 0-7.5 3.5"/><circle cx="8.5" cy="10.5" r=".5" fill="currentColor"/><circle cx="15.5" cy="10.5" r=".5" fill="currentColor"/><path d="M7 15h10"/></svg>
                        <h3 class="text-xl font-semibold text-gray-700 dark:text-gray-300">Резултат</h3>
                        <p class="text-gray-500 dark:text-gray-400">Изчаква се избор...</p>
                    </div>
                    <div id="result-state" class="hidden">
                        <h3 id="result-emotion-name" class="text-3xl md:text-4xl font-bold text-white text-shadow"></h3>
                        <p id="result-emotion-def" class="mt-4 text-lg text-white/90 text-shadow"></p>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        // Основни емоции с техните български имена и цветове
        const emotions = {
            joy: { name: 'Радост', color: '#FCD34D', shadow: 'rgba(252, 211, 77, 0.5)'},
            sadness: { name: 'Тъга', color: '#60A5FA', shadow: 'rgba(96, 165, 250, 0.5)' },
            fear: { name: 'Страх', color: '#C084FC', shadow: 'rgba(192, 132, 252, 0.5)' },
            anger: { name: 'Гняв', color: '#F87171', shadow: 'rgba(248, 113, 113, 0.5)' },
            disgust: { name: 'Отвращение', color: '#4ADE80', shadow: 'rgba(74, 222, 128, 0.5)' },
            anxiety: { name: 'Тревожност', color: '#FB923C', shadow: 'rgba(251, 146, 60, 0.5)'},
            envy: { name: 'Завист', color: '#2DD4BF', shadow: 'rgba(45, 212, 191, 0.5)'},
            embarrassment: { name: 'Смущение', color: '#F472B6', shadow: 'rgba(244, 114, 182, 0.5)'},
            boredom: { name: 'Отегчение', color: '#818CF8', shadow: 'rgba(129, 140, 248, 0.5)' }
        };

        // Пълна база данни с комбинации, попълнена по диаграмата
        const combinations = {
            anger: { anger: { name: 'Ярост', definition: 'Изключително силен, неконтролируем гняв.' }, anxiety: { name: 'Разочарование', definition: 'Чувство на гняв, когато си възпрепятстван да постигнеш нещо, което искаш.' }, boredom: { name: 'Раздразнение', definition: 'Леко чувство на гняв или досада от нещо, което се повтаря или не е интересно.' }, disgust: { name: 'Омраза', definition: 'Много силна и дълбока неприязън към някого или нещо.' }, embarrassment: { name: 'Отхвърляне', definition: 'Болезненото чувство, когато не си приет или одобрен от другите.' }, envy: { name: 'Ревност', definition: 'Гняв и несигурност от страх да не загубиш някого или нещо ценно заради друг.' }, fear: { name: 'Предразсъдък', definition: 'Негативно мнение за някого, формирано от страх, без да го познаваш добре.' }, joy: { name: 'Пламенност', definition: 'Силна и страстна енергия, с която преследваш цел или кауза.' }, sadness: { name: 'Предателство', definition: 'Дълбока болка, причинена от някой, на когото си имал доверие.' } },
            anxiety: { anxiety: { name: 'Параноя', definition: 'Постоянен и прекомерен страх, че нещо лошо ще се случи или че другите ти мислят злото.' }, boredom: { name: 'Предчувствие', definition: 'Тревожно усещане или очакване, че нещо (често неприятно) предстои да се случи.' }, disgust: { name: 'Безпокойство', definition: 'Неприятно чувство на напрежение и дискомфорт в неприятна ситуация.' }, embarrassment: { name: 'Въздържане', definition: 'Тревожност, която те кара да избягваш социални контакти или да си мълчалив.' }, envy: { name: 'Нужда', definition: 'Тревожно усещане, че нещо ти липсва, особено когато се сравняваш с другите.' }, fear: { name: 'Паника', definition: 'Внезапен, неконтролируем пристъп на силен страх, който те кара да действаш неразумно.' }, joy: { name: 'Вълнение', definition: 'Силно и нетърпеливо очакване на нещо хубаво, което предстои.' }, sadness: { name: 'Съжаление', definition: 'Тъга по нещо, което си направил или не си направил в миналото.' } },
            boredom: { boredom: { name: 'Безразличие', definition: 'Пълна липса на интерес, емоции или желание за каквото и да било.' }, disgust: { name: 'Дискомфорт', definition: 'Леко чувство на неудобство, неприязън или че не си на мястото си.' }, embarrassment: { name: 'Смут', definition: 'Чувство на объркване и вътрешен дискомфорт, когато не знаеш как да постъпиш.' }, envy: { name: 'Разсеяност', definition: 'Липса на фокус, защото умът ти е зает да мисли за това, което другите имат или правят.' }, fear: { name: 'Объркване', definition: 'Състояние, в което не разбираш какво се случва и се чувстваш дезориентиран.' }, joy: { name: 'Любопитство', definition: 'Силно желание да научиш или изследваш нещо ново и интересно.' }, sadness: { name: 'Скръб', definition: 'Дълбока и продължителна тъга, най-често породена от голяма загуба.' } },
            disgust: { disgust: { name: 'Бунт', definition: 'Силно противопоставяне на правила или авторитет, защото ги намираш за отвратителни.' }, embarrassment: { name: 'Порицание', definition: 'Да изразиш силно неодобрение към нечии действия, които намираш за отблъскващи.' }, envy: { name: 'Осъждане', definition: 'Да формираш силно негативно мнение за някого от завист и отвращение.' }, fear: { name: 'Отблъскване', definition: 'Силна неприязън, която те кара да искаш да стоиш далеч от нещо или някого.' }, joy: { name: 'Интрига', definition: 'Любопитство към нещо странно, мистериозно или дори леко отблъскващо.' }, sadness: { name: 'Разкаяние', definition: 'Дълбоко съжаление и вина за нещо лошо, което си направил.' } },
            embarrassment: { embarrassment: { name: 'Силно притеснение', definition: 'Много силно и болезнено усещане за неудобство, когато си център на внимание.' }, envy: { name: 'Осъждане (на себе си)', definition: 'Чувство на срам и завист, което те кара да бъдеш силно критичен към себе си.' }, fear: { name: 'Вина', definition: 'Усещането, че си направил нещо нередно и те е страх от последствията.' }, joy: { name: 'Самоосъзнаване', definition: 'Да разбираш кой си, какви са твоите силни и слаби страни и какво е твоето място в света.' }, sadness: { name: 'Срам', definition: 'Болезнено чувство на унижение заради нещо, което си направил или което си ти.' } },
            envy: { envy: { name: 'Желание', definition: 'Силен копнеж да имаш това, което някой друг притежава.' }, fear: { name: 'Съмнение', definition: 'Чувство на несигурност в себе си или в другите, подхранено от страх и сравнение.' }, joy: { name: 'Мотивация', definition: 'Да видиш успеха на друг и това да те вдъхнови да постигнеш същото.' }, sadness: { name: 'Неадекватност', definition: 'Усещането, че не си достатъчно добър в сравнение с останалите.' } },
            fear: { fear: { name: 'Ужас', definition: 'Изключително силен, парализиращ страх пред реална или въображаема заплаха.' }, joy: { name: 'Изненада', definition: 'Внезапна емоция в отговор на нещо неочаквано, което може да е добро или лошо.' }, sadness: { name: 'Потрес', definition: 'Дълбок и мъчителен страх, смесен с тъга и безпокойство за бъдещето.' } },
            joy: { joy: { name: 'Екстаз', definition: 'Най-силното чувство на щастие и възторг, пълна наслада.' }, sadness: { name: 'Еуфория', definition: 'Сладкогорчиво усещане на радост, примесена с тъга, често при спомени.' } },
            sadness: { sadness: { name: 'Отчаяние', definition: 'Състояние, в което си изгубил всякаква надежда.' } }
        };

        let selectedEmotion1 = null;
        let selectedEmotion2 = null;

        const selector1 = document.getElementById('emotion-selector-1');
        const selector2 = document.getElementById('emotion-selector-2');
        const resultCard = document.getElementById('result-card');
        const initialStateDiv = document.getElementById('initial-state');
        const resultStateDiv = document.getElementById('result-state');
        const resultName = document.getElementById('result-emotion-name');
        const resultDef = document.getElementById('result-emotion-def');

        function createEmotionButton(id, emotion, group) {
            const button = document.createElement('button');
            button.className = 'emotion-btn w-full text-white font-semibold py-3 px-2 rounded-lg shadow-lg focus:outline-none';
            button.textContent = emotion.name;
            button.dataset.emotionId = id;
            button.style.backgroundColor = emotion.color;
            button.style.setProperty('--tw-shadow-color', emotion.shadow);
            button.addEventListener('click', () => handleSelection(group, id, button));
            return button;
        }

        for (const id in emotions) {
            selector1.appendChild(createEmotionButton(id, emotions[id], 1));
            selector2.appendChild(createEmotionButton(id, emotions[id], 2));
        }

        function handleSelection(group, emotionId, buttonEl) {
            if (group === 1) {
                selectedEmotion1 = (selectedEmotion1 === emotionId) ? null : emotionId;
                selector1.querySelectorAll('.emotion-btn').forEach(btn => btn.classList.toggle('selected', btn === buttonEl && selectedEmotion1));
            } else {
                selectedEmotion2 = (selectedEmotion2 === emotionId) ? null : emotionId;
                selector2.querySelectorAll('.emotion-btn').forEach(btn => btn.classList.toggle('selected', btn === buttonEl && selectedEmotion2));
            }
            updateResult();
        }
        
        function updateResult() {
            if (selectedEmotion1 && selectedEmotion2) {
                const keys = [selectedEmotion1, selectedEmotion2].sort();
                const emotion1Key = keys[0];
                const emotion2Key = keys[1];
                const result = combinations[emotion1Key] && combinations[emotion1Key][emotion2Key];
                
                if (result) {
                    resultName.textContent = result.name;
                    resultDef.textContent = result.definition;
                    initialStateDiv.classList.add('hidden');
                    resultStateDiv.classList.remove('hidden');
                    const color1 = emotions[selectedEmotion1].color;
                    const color2 = emotions[selectedEmotion2].color;
                    resultCard.style.setProperty('--color-1', color1);
                    resultCard.style.setProperty('--color-2', color2);
                } else {
                    showInitialState('Комбинацията не е намерена.');
                }
            } else {
                showInitialState('Изберете две емоции, за да видите резултата.');
            }
        }
        
        function showInitialState(message) {
             initialStateDiv.classList.remove('hidden');
             resultStateDiv.classList.add('hidden');
             initialStateDiv.querySelector('p').textContent = message;
             resultCard.style.setProperty('--color-1', '#e0e0e0');
             resultCard.style.setProperty('--color-2', '#f0f0f0');
        }

        // Register Service Worker
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js').then(registration => {
                    console.log('SW registered: ', registration);
                }).catch(registrationError => {
                    console.log('SW registration failed: ', registrationError);
                });
            });
        }
    </script>
</body>
</html>
